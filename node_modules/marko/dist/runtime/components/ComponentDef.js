"use strict";

var complain;
var componentUtil = require("./util");
var attachBubblingEvent = componentUtil._z_;
var addDelegatedEventHandler = require("./event-delegation")._A_;
var extend = require("raptor-util/extend");
var KeySequence = require("./KeySequence");

var FLAG_WILL_RERENDER_IN_BROWSER = 1;
// var FLAG_HAS_BODY_EL = 2;
// var FLAG_HAS_HEAD_EL = 4;
var FLAG_OLD_HYDRATE_NO_CREATE = 8;

/**
 * A ComponentDef is used to hold the metadata collected at runtime for
 * a single component and this information is used to instantiate the component
 * later (after the rendered HTML has been added to the DOM)
 */
function ComponentDef(component, componentId, globalComponentsContext) {
    this._B_ = globalComponentsContext; // The AsyncWriter that this component is associated with
    this.k_ = component;
    this.id = componentId;

    this._C_ = undefined; // An array of DOM events that need to be added (in sets of three)

    this._D_ = false;

    this._E_ = false;
    this.g_ = 0;

    this._F_ = 0; // The unique integer to use for the next scoped ID

    this.Z_ = null;

    this._G_ = null;
}

ComponentDef.prototype = {
    c_: function (key) {
        var keySequence = this.Z_ || (this.Z_ = new KeySequence());
        return keySequence.c_(key);
    },

    _H_: function (key, bodyOnly) {
        var lookup = this._G_ || (this._G_ = {});
        lookup[key] = bodyOnly ? 2 : 1;
    },

    /**
     * This helper method generates a unique and fully qualified DOM element ID
     * that is unique within the scope of the current component.
     */
    elId: function (nestedId) {
        var id = this.id;

        if (nestedId == null) {
            return id;
        } else {
            if (typeof nestedId !== "string") {

                nestedId = String(nestedId);
                // eslint-disable-next-line no-constant-condition
            }

            if (nestedId.indexOf("#") === 0) {
                id = "#" + id;
                nestedId = nestedId.substring(1);
            }

            return id + "-" + nestedId;
        }
    },
    /**
     * Returns the next auto generated unique ID for a nested DOM element or nested DOM component
     */
    _I_: function () {
        return this.id + "-c" + this._F_++;
    },

    d: function (eventName, handlerMethodName, isOnce, extraArgs) {
        addDelegatedEventHandler(eventName);
        return attachBubblingEvent(this, handlerMethodName, isOnce, extraArgs);
    },

    get f_() {
        return this.k_.f_;
    }
};

ComponentDef._J_ = function (o, types, global, registry) {
    var id = o[0];
    var typeName = types[o[1]];
    var input = o[2];
    var extra = o[3];

    var isLegacy = extra.l;
    var state = extra.s;
    var componentProps = extra.w;
    var flags = extra.f;

    var component = typeName /* legacy */ && registry._K_(typeName, id, isLegacy);

    // Prevent newly created component from being queued for update since we area
    // just building it from the server info
    component.V_ = true;

    if (!isLegacy && flags & FLAG_WILL_RERENDER_IN_BROWSER && !(flags & FLAG_OLD_HYDRATE_NO_CREATE)) {
        if (component.onCreate) {
            component.onCreate(input, { global: global });
        }
        if (component.onInput) {
            input = component.onInput(input, { global: global }) || input;
        }
    } else {
        if (state) {
            var undefinedPropNames = extra.u;
            if (undefinedPropNames) {
                undefinedPropNames.forEach(function (undefinedPropName) {
                    state[undefinedPropName] = undefined;
                });
            }
            // We go through the setter here so that we convert the state object
            // to an instance of `State`
            component.state = state;
        }

        if (componentProps) {
            extend(component, componentProps);
        }
    }

    component.R_ = input;

    if (extra.b) {
        component.O_ = extra.b;
    }

    var scope = extra.p;
    var customEvents = extra.e;
    if (customEvents) {
        component._w_(customEvents, scope);
    }

    component.T_ = global;

    return {
        id: id,
        k_: component,
        _L_: extra.r,
        _C_: extra.d,
        g_: extra.f || 0
    };
};

module.exports = ComponentDef;