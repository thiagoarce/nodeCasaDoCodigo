var extend = require("raptor-util/extend");

function ensure(state, propertyName) {
    var proto = state.constructor.prototype;
    if (!(propertyName in proto)) {
        Object.defineProperty(proto, propertyName, {
            get: function () {
                return this._v_[propertyName];
            },
            set: function (value) {
                this._g_(propertyName, value, false /* ensure:false */);
            }
        });
    }
}

function State(component) {
    this.k_ = component;
    this._v_ = {};

    this.W_ = false;
    this._m_ = null;
    this._l_ = null;
    this._U_ = null; // An object that we use to keep tracking of state properties that were forced to be dirty

    Object.seal(this);
}

State.prototype = {
    J_: function () {
        var self = this;

        self.W_ = false;
        self._m_ = null;
        self._l_ = null;
        self._U_ = null;
    },

    _e_: function (newState) {
        var state = this;
        var key;

        var rawState = this._v_;

        for (key in rawState) {
            if (!(key in newState)) {
                state._g_(key, undefined, false /* ensure:false */
                , false /* forceDirty:false */
                );
            }
        }

        for (key in newState) {
            state._g_(key, newState[key], true /* ensure:true */
            , false /* forceDirty:false */
            );
        }
    },
    _g_: function (name, value, shouldEnsure, forceDirty) {
        var rawState = this._v_;

        if (shouldEnsure) {
            ensure(this, name);
        }

        if (forceDirty) {
            var forcedDirtyState = this._U_ || (this._U_ = {});
            forcedDirtyState[name] = true;
        } else if (rawState[name] === value) {
            return;
        }

        if (!this.W_) {
            // This is the first time we are modifying the component state
            // so introduce some properties to do some tracking of
            // changes to the state
            this.W_ = true; // Mark the component state as dirty (i.e. modified)
            this._m_ = rawState;
            this._v_ = rawState = extend({}, rawState);
            this._l_ = {};
            this.k_._f_();
        }

        this._l_[name] = value;

        if (value === undefined) {
            // Don't store state properties with an undefined or null value
            delete rawState[name];
        } else {
            // Otherwise, store the new value in the component state
            rawState[name] = value;
        }
    },
    toJSON: function () {
        return this._v_;
    }
};

module.exports = State;