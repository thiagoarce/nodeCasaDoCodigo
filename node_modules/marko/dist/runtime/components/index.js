"use strict";

var warp10 = require("warp10");
var safeJSONRegExp = /<\/|\u2028|\u2029/g;

function safeJSONReplacer(match) {
    if (match === "</") {
        return "\\u003C/";
    } else {
        return "\\u" + match.charCodeAt(0).toString(16);
    }
}

function safeJSON(json) {
    return json.replace(safeJSONRegExp, safeJSONReplacer);
}

function addComponentsFromContext(componentsContext, componentsFinal, typesLookup, typesArray) {
    var components = componentsContext.i_;
    var len;
    if ((len = components.length) === 0) {
        return;
    }

    for (var i = 0; i < len; i++) {
        var componentDef = components[i];
        var id = componentDef.id;
        var component = componentDef.k_;
        var flags = componentDef.g_;

        var state = component.state;
        var input = component.input;
        var typeName = component.typeName;
        var customEvents = component.P_;
        var scope = component.I_;
        var bubblingDomEvents = component.O_;

        component.K_ = undefined; // We don't use `delete` to avoid V8 deoptimization
        component.R_ = undefined; // We don't use `delete` to avoid V8 deoptimization
        component.typeName = undefined;
        component.id = undefined;
        component.P_ = undefined;
        component.I_ = undefined;
        component.O_ = undefined;
        component._T_ = undefined;

        if (!typeName) {
            continue;
        }

        var typeIndex = typesLookup[typeName];
        if (typeIndex === undefined) {
            typeIndex = typesArray.length;
            typesArray.push(typeName);
            typesLookup[typeName] = typeIndex;
        }

        var hasProps = false;

        let componentKeys = Object.keys(component);
        for (let i = 0, len = componentKeys.length; i < len; i++) {
            let key = componentKeys[i];

            if (component[key] !== undefined) {
                hasProps = true;
                break;
            }
        }

        var undefinedPropNames = undefined;

        if (state) {
            // Update state properties with an `undefined` value to have a `null`
            // value so that the property name will be serialized down to the browser.
            // This ensures that we add the proper getter/setter for the state property.

            let stateKeys = Object.keys(state);
            for (let i = 0, len = stateKeys.length; i < len; i++) {
                let key = stateKeys[i];

                if (state[key] === undefined) {
                    if (undefinedPropNames) {
                        undefinedPropNames.push(key);
                    } else {
                        undefinedPropNames = [key];
                    }
                }
            }
        }

        var extra = {
            b: bubblingDomEvents,
            d: componentDef._C_,
            e: customEvents,
            f: flags ? flags : undefined,
            l: componentDef.ah_,
            p: customEvents && scope, // Only serialize scope if we need to attach custom events
            r: componentDef._L_,
            s: state,
            u: undefinedPropNames,
            w: hasProps ? component : undefined
        };

        componentsFinal.push([id, // 0 = id
        typeIndex, // 1 = type
        input, // 2 = input
        extra // 3
        ]);
    }

    components.length = 0;

    // Also add any components from nested contexts
    var nestedContexts = componentsContext._M_;
    if (nestedContexts !== undefined) {
        nestedContexts.forEach(function (nestedContext) {
            addComponentsFromContext(nestedContext, componentsFinal, typesLookup, typesArray);
        });
    }
}

function getRenderedComponents(out) {
    var componentsContext = out.i_;

    if (componentsContext === null) {
        return;
    }

    var componentsFinal = [];
    var typesLookup = {};
    var typesArray = [];

    addComponentsFromContext(componentsContext, componentsFinal, typesLookup, typesArray);

    if (componentsFinal.length !== 0) {
        return { r: out.global.runtimeId, w: componentsFinal, t: typesArray };
    }
}

function writeInitComponentsCode(fromOut, targetOut, shouldIncludeAll) {
    var initCode = exports.ai_(fromOut, targetOut, shouldIncludeAll);
    if (initCode === "") {
        return;
    }

    var outGlobal = targetOut.global;
    var cspNonce = outGlobal.cspNonce;
    var nonceAttr = cspNonce ? " nonce=" + JSON.stringify(cspNonce) : "";

    targetOut.write("<script" + nonceAttr + ">" + initCode + "</script>");
}

exports.ai_ = function getInitComponentsCode(fromOut, targetOut, shouldIncludeAll) {
    var renderedComponents = getRenderedComponents(fromOut, shouldIncludeAll);
    if (renderedComponents === undefined) {
        return "";
    }

    var outGlobal = targetOut.global;
    var runtimeId = outGlobal.runtimeId;
    var componentGlobalKey = "$" + (runtimeId === "M" ? "components" : runtimeId + "_components");

    return componentGlobalKey + "=(window." + componentGlobalKey + "||[]).concat(" + safeJSON(warp10.stringify(renderedComponents)) + ")||" + componentGlobalKey;
};

exports.writeInitComponentsCode = writeInitComponentsCode;

/**
 * Returns an object that can be sent to the browser using JSON.stringify. The parsed object should be
 * passed to require('marko-components').initComponents(...);
 *
 * @param  {ComponentsContext|AsyncWriter} componentsContext A ComponentsContext or an AsyncWriter
 * @return {Object} An object with information about the rendered components that can be serialized to JSON. The object should be treated as opaque
 */
exports.getRenderedComponents = function (out) {
    var renderedComponents = getRenderedComponents(out, true);
    return warp10.stringifyPrepare(renderedComponents);
};