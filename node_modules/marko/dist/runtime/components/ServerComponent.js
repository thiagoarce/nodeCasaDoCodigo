"use strict";

var complain;

class ServerComponent {
    constructor(id, input, out, typeName, customEvents, scope) {
        this.id = id;
        this.P_ = customEvents;
        this.I_ = scope;
        this._S_ = undefined;
        this.R_ = undefined;
        this.K_ = undefined;
        this.typeName = typeName;
        this.O_ = undefined; // Used to keep track of bubbling DOM events for components rendered on the server
        this._T_ = 0;

        if (this.onCreate !== undefined) {
            this.onCreate(input, out);
        }

        if (this.onInput !== undefined) {
            var updatedInput = this.onInput(input, out) || input;

            if (this.R_ === undefined) {
                this.R_ = updatedInput;
            }

            this._S_ = updatedInput;
        } else {
            this.R_ = this._S_ = input;
        }

        if (this.onRender !== undefined) {
            this.onRender(out);
        }
    }

    set input(newInput) {
        this.R_ = newInput;
    }

    get input() {
        return this.R_;
    }

    set state(newState) {
        this.K_ = newState;
    }

    get state() {
        return this.K_;
    }

    get _u_() {
        return this.K_;
    }

    elId(nestedId) {
        var id = this.id;

        if (nestedId == null) {
            return id;
        } else {
            if (typeof nestedId !== "string") {

                nestedId = String(nestedId);
                // eslint-disable-next-line no-constant-condition
            }

            if (nestedId.indexOf("#") === 0) {
                id = "#" + id;
                nestedId = nestedId.substring(1);
            }

            return id + "-" + nestedId;
        }
    }
}

ServerComponent.prototype.getElId = ServerComponent.prototype.elId;

module.exports = ServerComponent;