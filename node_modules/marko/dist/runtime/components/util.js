var FLAG_WILL_RERENDER_IN_BROWSER = 1;
// var FLAG_HAS_BODY_EL = 2;
// var FLAG_HAS_HEAD_EL = 4;

function nextComponentIdProvider(out) {
    var prefix = out.global.componentIdPrefix || out.global.widgetIdPrefix || "s"; // "s" is for server (we use "b" for the browser)
    var nextId = 0;

    // eslint-disable-next-line no-constant-condition


    return function nextComponentId() {
        return prefix + nextId++;
    };
}

function attachBubblingEvent(componentDef, handlerMethodName, isOnce, extraArgs) {
    if (handlerMethodName) {
        if (extraArgs) {
            var component = componentDef.k_;
            var eventIndex = component._T_++;

            // If we are not going to be doing a rerender in the browser
            // then we need to actually store the extra args with the UI component
            // so that they will be serialized down to the browser.
            // If we are rerendering in the browser then we just need to
            // increment ___bubblingDomEventsExtraArgsCount to keep track of
            // where the extra args will be found when the UI component is
            // rerendered in the browser

            if (!(componentDef.g_ & FLAG_WILL_RERENDER_IN_BROWSER)) {
                if (eventIndex === 0) {
                    component.O_ = [extraArgs];
                } else {
                    component.O_.push(extraArgs);
                }
            }

            return handlerMethodName + " " + componentDef.id + " " + isOnce + " " + eventIndex;
        } else {
            return handlerMethodName + " " + componentDef.id + " " + isOnce;
        }
    }
}

exports._P_ = nextComponentIdProvider;
exports.ay_ = true;
exports._z_ = attachBubblingEvent;
exports.aD_ = function noop() {};
exports.G_ = function noop() {};